#!/bin/bash
# Log file path

LOG_DIR=$(dirname "$0")
LOG_FILE="$LOG_DIR/node_error.log"

# Function to log error messages
log_error() {
    local message="$1"
    echo "$(date "+%Y-%m-%d %H:%M:%S") - ERROR: $message" >> "$LOG_FILE"
}

if [[ ! $(grep -r 'node-role=master'  /opt/cellframe-node/etc/network) ]]; then
  echo "Not a masternode, exiting..."
  log_error "Not a masternode, exiting..."
  exit 0
fi

for utils_needed in bc dig wget
do
  if ! command -v $utils_needed >/dev/null 2>&1; then
    echo "Dependency $utils_needed is not installed. Exiting... "
    log_error "Dependency $utils_needed is not installed. Exiting... "
    exit 0
  fi
done

echo "<html>"
echo "<head>"
echo "<title>Node Status</title>"
echo "<meta http-equiv=\"refresh\" content=\"60\">"
echo "<style>"
echo "#block-list { display: none; }"
echo "</style>"
echo "<script>"
echo "function toggleBlockList() {"
echo "  var blockList = document.getElementById('block-list');"
echo "  if (blockList.style.display === 'none') {"
echo "    blockList.style.display = 'block';"
echo "  } else {"
echo "    blockList.style.display = 'none';"
echo "  }"
echo "}"
echo "</script>"
echo "</head>"
echo "<body>"
echo ""
echo "<pre id=\"output\">"

echo -n "Hostname :" ; hostname

activetime=$(systemctl status cellframe-node)
echo "$activetime" | sed 's/^[[:space:]]*//' | grep Active
#Get version & cpu & mem
latest_version=$(wget -qO- https://pub.cellframe.net/linux/cellframe-node/master/node-version-badge.svg | grep -o '<text x="114.5" y="14">.*</text>' | sed -n 's/.*>\(.*\)<\/text>.*/\1/p' | sed 's/\./-/2')
current_version=$(/opt/cellframe-node/bin/cellframe-node-cli version | awk '{print $3}')
echo -n "node version         :"
if [[ "$current_version" == "$latest_version" ]]; then
  echo "<span style='background-color: green; color: white; padding: 0.2em 0.5em; border-radius: 3px; margin-left: 10px;'>$current_version</span>"
else
  echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px; margin-left: 10px;'>$current_version >> $latest_version</span>"
fi

mem_stats=$(cat /proc/meminfo)  # Read memory statistics from /proc/meminfo

total_memory=$(echo "$mem_stats" | grep "MemTotal" | awk '{print $2}')  # Extract total memory value
free_memory=$(echo "$mem_stats" | grep "MemAvailable" | awk '{print $2}')  # Extract availble memory value

used_memory=$((total_memory - free_memory))  # Calculate used memory
memory_utilization=$((used_memory * 100 / total_memory))  # Calculate memory utilization percentage

cpu_utilization=$(/opt/cellframe-node/bin/cellframe-node-cli stats cpu | grep -oP 'Total: \K\d+')  # Extract CPU utilization

if [[ $cpu_utilization -gt 90 ]]; then
  cpu_color="red"
    log_error "High cpu usage"
else
  cpu_color="green"
fi

# Check memory utilization and set color
if [[ $memory_utilization -gt 90 ]]; then
  memory_color="red"
    log_error "High memory usage"

else
  memory_color="green"
fi

echo ""
# Display CPU Utilization with color based on utilization percentage
echo -n "CPU Utilization      : "
echo "<span style='background-color: $cpu_color; color: white; padding: 0.2em 0.5em; border-radius: 3px;'> $cpu_utilization</span>"

# Display Memory Utilization with color based on utilization percentage
echo -n "Memory Utilization   : "
echo "<span style='background-color: $memory_color; color: white; padding: 0.2em 0.5em; border-radius: 3px;'> $memory_utilization %</span>"

echo ""

#Get networks certicaftes and wallet info.
networks=$(/opt/cellframe-node/bin/cellframe-node-cli net list | grep -oP '(?<=^\t)[^ ]+')
certs=$(ls /opt/cellframe-node/var/lib/ca/ | grep -oP '^(?!node-addr-).*dcert' | sed 's/.dcert//g')
wallets=$(ls /opt/cellframe-node/var/lib/wallet/ | sed 's/.dwallet//g')
while read -ra network; do
#Get networrk information
    status=$(/opt/cellframe-node/bin/cellframe-node-cli net get status -net "$network")
    node_address=$(echo "$status" | grep -oP 'cur node address \K\S+')
    node_state=$(echo "$status" | grep 'has state' | sed 's/.*has state //; s/,.*//; s/([^()]*)//g')
    network_target_state=$(echo "$status" | grep 'target state' | sed 's/.*target state //; s/),.*//')
    fee_addr=$(cat /opt/cellframe-node/etc/network/"$network"".cfg" | grep "fee_addr="  | sed 's/^.........//')
    cert_name=$(cat /opt/cellframe-node/etc/network/"$network"".cfg" | grep "blocks-sign-cert="  | sed 's/^.................//')
    node_status=$(cat /opt/cellframe-node/etc/network/"$network"".cfg" | grep node-role)
    current_block=$(/opt/cellframe-node/bin/cellframe-node-cli block list -net "$network" -chain main | grep .main | awk '{print $3}')

checklist=0
#Check
if /opt/cellframe-node/bin/cellframe-node-cli srv_stake order list -net "$network" | grep -q "$node_address"; then
((checklist++))
fi
#Check
if /opt/cellframe-node/bin/cellframe-node-cli node dump  -net "$network" | grep -q "$node_address"; then
((checklist++))
fi

#Check
if ! /opt/cellframe-node/bin/cellframe-node-cli srv_stake list keys -net "$network" -cert "$cert_name" | grep -q "Active: false"; then

((checklist++))

fi
#check node state
    if [[ $checklist -eq 3 ]]; then
        echo -n "<span style='background-color: green; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>Network >>>></span>"
    else
        echo -n "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>Network >>>></span>"
    fi

    echo "<button onclick=\"var blockList = document.getElementById('$network'); if (blockList.style.display === 'none') { blockList.style.display = 'block'; this.innerHTML = '$network'; } else { blockList.style.display = 'none'; this.innerHTML = '$network'; }\">$network</button>"
    echo "    <div id=\"$network\" style=\"display:none\">"
    echo "    Our Node Status      : $node_status"
    echo "    Our Node Address     : $node_address"
    echo -n "    Our Node State       :"

    if [[ "$node_state" == "NET_STATE_OFFLINE " ]]; then
        echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>OFFLINE</span>"
    else
        echo "<span> $node_state</span>"
    fi
    echo "    Network        State : $network_target_state"
    echo "    Current Block        : $current_block"

#Check
if /opt/cellframe-node/bin/cellframe-node-cli srv_stake order list -net "$network" | grep -q "$node_address"; then
  echo ""
else
  echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>$node_address does not have an active order</span>"
    log_error "$node_address does not have an active order"
fi
#Check
if /opt/cellframe-node/bin/cellframe-node-cli node dump  -net "$network" | grep -q "$node_address"; then
  echo ""
else
  echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'>$node_address is not in node list</span>"
extip=$(dig +short myip.opendns.com @resolver1.opendns.com) #
echo "cellframe-node-cli node add -net $network -ipv4 $extip -port 8079"
    log_error "$node_address is not in node list<"
fi
#Check
if /opt/cellframe-node/bin/cellframe-node-cli srv_stake list keys -net "$network" -cert "$cert_name" | grep -q "Active: false"; then
echo "<span style='background-color: red; color: white; padding: 0.2em 0.5em; border-radius: 3px;'> Certificate not active!</span>"
    log_error " Certificate not active!"
fi

#Certificate and rewards
block_list=$(/opt/cellframe-node/bin/cellframe-node-cli block list signed -net "$network" -chain main -cert "$cert_name")
cert_status=$(/opt/cellframe-node/bin/cellframe-node-cli srv_stake list keys -net "$network" -cert "$cert_name")
hashes=( $(/opt/cellframe-node/bin/cellframe-node-cli block list signed -net "$network" -chain main -cert "$cert_name" -unspent | tr -d '\t' | grep -oP '^[a-zA-Z0-9]{66}') )
autostatuss=$(/opt/cellframe-node/bin/cellframe-node-cli block autocollect status -net "$network" -chain main | tail -n +3)
b_reward=$(/opt/cellframe-node/bin/cellframe-node-cli block reward -net "$network" -chain main show)
output_date=$(/opt/cellframe-node/bin/cellframe-node-cli tx_history -addr "$fee_addr" | grep -B 13 reward | head -n 1 | sed 's/^[ \t]*//' | sed 's/^tx_created: //')
last_date=$(/opt/cellframe-node/bin/cellframe-node-cli tx_history -addr "$fee_addr" | grep -B 13 reward | grep tx_created | tail -n 1 | sed 's/^[ \t]*//' | sed 's/^tx_created: //')
stake_info=$(/opt/cellframe-node/bin/cellframe-node-cli srv_stake list keys -net "$network" -cert "$cert_name")
initial_investment=$(echo "$stake_info" | grep "Stake value" | awk '{print $3}')

echo "$autostatuss"
echo "$b_reward"
total_rewards=$(/opt/cellframe-node/bin/cellframe-node-cli tx_history -addr "$fee_addr" | grep -B 3 "source_address: reward collecting" | awk '/recv_coins/ { total += $2 } END { print total }' )
output_timestamp=$(date -d "$output_date" +"%s")
current_timestamp=$(date +"%s")
time_difference=$((current_timestamp - output_timestamp))
days_passed=$((time_difference / 86400))
yearly_e_gain=$(echo "scale=5; $total_rewards / $days_passed *365" | bc)
apy=$(echo "scale=5; ($yearly_e_gain / $initial_investment) * 100 / 1000" | bc)

echo ""
echo "=== Certificate ==="
echo "Delegated $cert_status" | grep  "Related weight"  | sed 's/^[[:space:]]*//'
echo "Total Distributed Rewards: $total_rewards"
echo "Estimated Apy % $apy"
echo ""
echo "First Signed Block date $output_date ($days_passed days)"
echo "Last Signed Block date  $last_date"

#check
if $(/opt/cellframe-node/bin/cellframe-node-cli block list signed -net "$network" -chain main -cert "$cert_name" | grep -q) "Have 0 blocks";then
echo /opt/cellframe-node/bin/cellframe-node-cli block list signed -net "$network" -chain main -cert "$cert_name" | grep -q "Have 0 blocks"
echo "0 blocks available to collect"
else
echo /opt/cellframe-node/bin/cellframe-node-cli block list signed -net "$network" -chain main -cert "$cert_name" | grep -q "Have 0 blocks"
echo ""
echo "Signed blocks : "
echo -n "$block_list" | grep ".main: Have" | awk '{print $3}'
echo ""
fi
echo "<button onclick=\"var blockList = document.getElementById('$cert-$network-list'); if (blockList.style.display === 'none') { blockList.style.display = 'block'; this.innerHTML = 'Unclaimed Block Rewards'; } else { blockList.style.display = 'none'; this.innerHTML = 'Unclaimed Block Rewards'; }\">Unclaimed Block Rewards</button>"
echo "<div id=\"$cert-$network-list\" style=\"display:none\">"
for hash in ${hashes[@]}
do

echo "<button onclick=\"var blockList = document.getElementById('$hash'); if (blockList.style.display === 'none') { blockList.style.display = 'block'; this.innerHTML = 'Collected'; } else { blockList.style.display = 'none'; this.innerHTML = '$hash'; }\">$hash</button>"
echo "<div id=\"$hash\" style=\"display:none\">"
echo "/opt/cellframe-node/bin/cellframe-node-cli block reward collect -cert $cert_name -addr $fee_addr -net $network -chain main -hashes $hash -fee 0.05e+18"
/opt/cellframe-node/bin/cellframe-node-cli block reward collect -cert $cert_name -addr $fee_addr -net $network -chain main -hashes $hash -fee 0.05e+18

echo "</div>"

done
echo "</div>"
echo "</div>"
done <<< "$networks"
echo "</pre>"
echo "</body>"
echo "</html>"

